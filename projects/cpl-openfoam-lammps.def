# ---------------------------------------------------------------------------
#
# Create ESI-OpenFOAM/LAMMPS image for CPL
#
# Build
#   apptainer build cpl-openfoam-lammps.sif cpl-openfoam-lammps.def
#
# Note
#   apptainer version 1.3.1
#
# ---------------------------------------------------------------------------
Bootstrap: localimage
From: {{ CONTAINERS_DIR }}/basic/{{ BASE_CONTAINER }}.sif

%arguments
    BASE_CONTAINER=cpl
    OS_DISTRO=ubuntu
    OS_VERSION=24.04
    MPI_IMPLEMENTATION=mpich
    MPI_VERSION=4.2.2

%files
    {{ CONTAINERS_DIR }}/../partials/0001-fix-working-with-CPL.patch /opt/patches/0001-fix-working-with-CPL.patch
    {{ CONTAINERS_DIR }}/../partials/0002-fix-compile-on-newer-compilers.patch /opt/patches/0002-fix-compile-on-newer-compilers.patch
	
%post -c /bin/bash
	export MPI_HOME=/opt/mpich
	export MPI_DIR=/opt/mpich
    DEBIAN_FRONTEND=noninteractive
    apt-get update
    apt install -y --no-install-recommends --fix-missing --fix-broken\
        libfftw3-dev libjpeg-dev libpng-dev cmake zlib1g-dev m4 \
        flex libfl-dev cmake bison libopenblas-dev liblapack-dev \
		pkg-config libglu1-mesa-dev
	 apt install -y --fix-missing --fix-broken\
		libvtk9-dev
    
    # install VORO (for LAMMPS)
	mkdir /opt/VORO && cd /opt/VORO
    curl -L "https://math.lbl.gov/voro++/download/dir/voro++-0.4.6.tar.gz"  | tar xz
    cd voro++-0.4.6 ;    make -j$(nproc) ;    make install 

    # Install LAMMPS -------------
    git clone --depth 1 https://github.com/lammps/lammps.git /opt/lammps
    cd /opt/lammps
    git fetch --depth 1 origin {{ LAMMPS_VERSION }}
    git checkout {{ LAMMPS_VERSION }}
    lammps_commit=$(git rev-parse --short HEAD)
    mkdir build
    cd build
    cmake -C ../cmake/presets/most.cmake \
    	-DPKG_MOLECULE=yes -DPKG_DIPOLE=yes  -DPKG_KSPACE=yes -DPKG_EXTRA-PAIR=yes -DPKG_DIELECTRIC=yes -DPKG_EFF=yes\
    	-DVORO_INCLUDE_DIR=/usr/local/include/voro++ \
   	 	-DVORO_LIBRARY=/usr/local/lib \
   	   	-DCMAKE_INSTALL_PREFIX=/opt/lammps \
   	   	-DBUILD_MPI=on -DBUILD_OMP=off -DBUILD_LIB=on -DFFT=FFTW3 ../cmake
    make -j$(nproc)
    make install

    # Install OpenFOAM -----------
    git clone --branch OpenFOAM-v{{ OPENFOAM_VERSION }} \
        https://develop.openfoam.com/Development/openfoam /usr/lib/openfoam/openfoam{{ OPENFOAM_VERSION }}
    cd /usr/lib/openfoam/openfoam{{ OPENFOAM_VERSION }}
    openfoam_commit=$(git rev-parse --short HEAD)
    git config --global user.email "me@example.com"
    git config --global user.name "Elwardi"
    git am -3 /opt/patches/0001-fix-working-with-CPL.patch
    git am -3 /opt/patches/0002-fix-compile-on-newer-compilers.patch
    sed -i 's/export WM_MPLIB=SYSTEMOPENMPI/export WM_MPLIB=SYSTEMMPI/' etc/bashrc
    export MPI_ROOT="$MPICH_DIR"
    export MPI_ARCH_INC="-isystem $MPI_ROOT/include"
    export MPI_ARCH_LIBS="-L$MPI_ROOT/lib -lmpi"
    export MPI_ARCH_FLAGS="-DOMPI_SKIP_MPICXX"
    export FOAM_INSTALL_DIR=/usr/lib/openfoam/openfoam{{ OPENFOAM_VERSION }}
    source etc/bashrc
    export FOAM_CPL_APP_LIBBIN=${FOAM_LIBBIN}
    ./Allwmake -j$(nproc)
    jq --arg app openfoam --arg commit $openfoam_commit \
        '.[$app] |= if . == null then
        {
            commit: $commit,
            patches_path: "/opt/patches",
            path: "/usr/lib/openfoam/openfoam{{ OPENFOAM_VERSION }}",
            version: "{{ OPENFOAM_VERSION }}"
        }
        else . +
        {
            commit: $commit,
            path: "/usr/lib/openfoam/openfoam{{ OPENFOAM_VERSION }}",
            patches_path: "/opt/patches",
            version: "{{ OPENFOAM_VERSION }}"
        } end' /apps.json > /tmp/apps.json
    mv /tmp/apps.json /apps.json
    jq --arg app lammps --arg commit $lammps_commit \
        '.[$app] |= if . == null then
        {
            commit: $commit,
            path: "/opt/lammps",
            version: "{{ LAMMPS_VERSION }}"
        }
        else . +
        {
            commit: $commit,
            path: "/opt/lammps",
            version: "{{ LAMMPS_VERSION }}"
        } end' /apps.json > /tmp/apps.json
    mv /tmp/apps.json /apps.json
    info

%environment
    export MPI_ROOT="/opt/mpich"
    export MPI_ARCH_INC="-isystem /opt/mpich/include"
    export MPI_ARCH_LIBS="-L/opt/mpich/lib -lmpi"
    export MPI_ARCH_FLAGS="-DOMPI_SKIP_MPICXX"
    export PATH=/opt/lammps/bin:$PATH
    export FOAM_INSTALL_DIR=/usr/lib/openfoam/openfoam{{ OPENFOAM_VERSION }}

%runscript
    if [ $# -eq 0 ]; then
        exec /bin/bash -c '
            source /usr/lib/openfoam/openfoam{{ OPENFOAM_VERSION }}/etc/bashrc > /dev/null
            /bin/bash --login
        '
    else
        exec /bin/bash -c "
            source /usr/lib/openfoam/openfoam{{ OPENFOAM_VERSION }}/etc/bashrc > /dev/null
            $@"
    fi

%labels
    Description Test applications for ESI OpenFOAM
